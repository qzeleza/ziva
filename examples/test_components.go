package examples

import (
	"fmt"
	"regexp"
	"strings"
	"time"

	"github.com/qzeleza/termos/internal/task"
)

// removeANSI —É–¥–∞–ª—è–µ—Ç ANSI escape –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏
func removeANSI(s string) string {
	ansiRegex := regexp.MustCompile(`\x1b\[[0-9;]*[a-zA-Z]`)
	return ansiRegex.ReplaceAllString(s, "")
}

// min –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –¥–≤—É—Ö int
func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

func main() {
	fmt.Println("=== –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ö–û–ú–ü–û–ù–ï–ù–¢–û–í ===")

	success := true

	// –¢–µ—Å—Ç 1: SingleSelectTask
	fmt.Println("\n1Ô∏è‚É£ –¢–µ—Å—Ç SingleSelectTask:")
	single := task.NewSingleSelectTask("–¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞", []string{"A", "B", "C"})
	single.WithTimeout(10*time.Second, 1)
	single.Run()
	view := single.View(80)

	fmt.Printf("   ‚úì –î–ª–∏–Ω–∞ View: %d —Å–∏–º–≤–æ–ª–æ–≤\n", len(view))
	fmt.Printf("   ‚úì –°–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–µ—Ñ–∏–∫—Å '‚óã': %t\n", strings.Contains(view, "‚óã"))
	fmt.Printf("   ‚úì –°–æ–¥–µ—Ä–∂–∏—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –º–µ–Ω—é: %t\n", strings.Contains(view, "A"))
	fmt.Printf("   ‚úì –°–æ–¥–µ—Ä–∂–∏—Ç —Ç–∞–π–º–µ—Ä '[': %t\n", strings.Contains(view, "["))

	timer := single.BaseTask.RenderTimer()
	fmt.Printf("   ‚úì –¢–∞–π–º–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç: %t ('%s')\n", len(timer) > 0, timer)

	if !strings.Contains(view, "‚óã") || !strings.Contains(view, "A") || len(timer) == 0 {
		success = false
		fmt.Println("   ‚ùå –û–®–ò–ë–ö–ê –≤ SingleSelectTask!")
	} else {
		fmt.Println("   ‚úÖ SingleSelectTask OK")
	}

	// –¢–µ—Å—Ç 2: InputTaskNew
	fmt.Println("\n2Ô∏è‚É£ –¢–µ—Å—Ç InputTaskNew:")
	input := task.NewInputTaskNew("–¢–µ—Å—Ç –≤–≤–æ–¥–∞", "–ø–æ–¥—Å–∫–∞–∑–∫–∞")
	input.WithTimeout(5*time.Second, "–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
	input.Run()
	inputView := input.View(80)

	// –£–±–∏—Ä–∞–µ–º ANSI –∫–æ–¥—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
	cleanInputView := removeANSI(inputView)

	fmt.Printf("   ‚úì –î–ª–∏–Ω–∞ View: %d —Å–∏–º–≤–æ–ª–æ–≤ (—Å—ã—Ä–æ–π), %d —Å–∏–º–≤–æ–ª–æ–≤ (–æ—á–∏—â–µ–Ω–Ω—ã–π)\n", len(inputView), len(cleanInputView))
	fmt.Printf("   ‚úì –°–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–µ—Ñ–∏–∫—Å '‚îî‚îÄ>': %t\n", strings.Contains(cleanInputView, "‚îî‚îÄ>"))
	fmt.Printf("   ‚úì –°–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–µ –≤–≤–æ–¥–∞ '...': %t\n", strings.Contains(cleanInputView, "..."))

	inputTimer := input.BaseTask.RenderTimer()
	cleanTimer := removeANSI(inputTimer)
	fmt.Printf("   ‚úì –¢–∞–π–º–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç: %t ('%s')\n", len(cleanTimer) > 0, cleanTimer)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –æ—á–∏—â–µ–Ω–Ω–æ–º –≤–∏–¥–µ
	hasPrefix := strings.Contains(cleanInputView, "‚îî‚îÄ>")
	hasInput := strings.Contains(cleanInputView, "...")
	hasTimer := len(cleanTimer) > 0 && strings.Contains(cleanTimer, "[")

	if !hasPrefix || !hasInput || !hasTimer {
		success = false
		fmt.Println("   ‚ùå –û–®–ò–ë–ö–ê –≤ InputTaskNew!")
		fmt.Printf("     –ü—Ä–µ—Ñ–∏–∫—Å: %t, –ü–æ–ª–µ –≤–≤–æ–¥–∞: %t, –¢–∞–π–º–µ—Ä: %t\n", hasPrefix, hasInput, hasTimer)
		// –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
		fmt.Printf("     –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ (–æ—á–∏—â–µ–Ω–Ω—ã–π): '%s'\n", cleanInputView[:min(100, len(cleanInputView))])
	} else {
		fmt.Println("   ‚úÖ InputTaskNew OK")
	}

	// –¢–µ—Å—Ç 3: MultiSelectTask
	fmt.Println("\n3Ô∏è‚É£ –¢–µ—Å—Ç MultiSelectTask:")
	multi := task.NewMultiSelectTask("–¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞", []string{"X", "Y", "Z"})
	multi.WithTimeout(8*time.Second, []string{"X", "Y"})
	multi.Run()
	multiView := multi.View(80)

	fmt.Printf("   ‚úì –î–ª–∏–Ω–∞ View: %d —Å–∏–º–≤–æ–ª–æ–≤\n", len(multiView))
	fmt.Printf("   ‚úì –°–æ–¥–µ—Ä–∂–∏—Ç —ç–ª–µ–º–µ–Ω—Ç—ã: %t\n", strings.Contains(multiView, "X"))
	fmt.Printf("   ‚úì –°–æ–¥–µ—Ä–∂–∏—Ç —á–µ–∫–±–æ–∫—Å—ã: %t\n", strings.Contains(multiView, "["))

	multiTimer := multi.BaseTask.RenderTimer()
	fmt.Printf("   ‚úì –¢–∞–π–º–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç: %t ('%s')\n", len(multiTimer) > 0, multiTimer)

	if !strings.Contains(multiView, "X") || len(multiTimer) == 0 {
		success = false
		fmt.Println("   ‚ùå –û–®–ò–ë–ö–ê –≤ MultiSelectTask!")
	} else {
		fmt.Println("   ‚úÖ MultiSelectTask OK")
	}

	// –¢–µ—Å—Ç 4: YesNoTask
	fmt.Println("\n4Ô∏è‚É£ –¢–µ—Å—Ç YesNoTask:")
	yesno := task.NewYesNoTask("–¢–µ—Å—Ç –¥–∞/–Ω–µ—Ç", "–í–æ–ø—Ä–æ—Å?")
	yesno.WithTimeout(6*time.Second, 0)
	yesno.Run()
	yesnoView := yesno.View(80)

	fmt.Printf("   ‚úì –î–ª–∏–Ω–∞ View: %d —Å–∏–º–≤–æ–ª–æ–≤\n", len(yesnoView))
	fmt.Printf("   ‚úì –°–æ–¥–µ—Ä–∂–∏—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã: %t\n", strings.Contains(yesnoView, "–î–∞"))

	yesnoTimer := yesno.BaseTask.RenderTimer()
	fmt.Printf("   ‚úì –¢–∞–π–º–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç: %t ('%s')\n", len(yesnoTimer) > 0, yesnoTimer)

	if !strings.Contains(yesnoView, "–î–∞") || len(yesnoTimer) == 0 {
		success = false
		fmt.Println("   ‚ùå –û–®–ò–ë–ö–ê –≤ YesNoTask!")
	} else {
		fmt.Println("   ‚úÖ YesNoTask OK")
	}

	// –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	fmt.Println("\n" + strings.Repeat("=", 50))
	if success {
		fmt.Println("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ö–û–î –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
		fmt.Println("‚ú® –¢–∞–π–º–µ—Ä—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è, –ø—Ä–µ—Ñ–∏–∫—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç, –º–µ–Ω—é –≤–∏–¥–Ω—ã!")
		fmt.Println("")
		fmt.Println("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å:")
		fmt.Println("   ./timeout_demo")
		fmt.Println("–∏–ª–∏")
		fmt.Println("   go run examples/final_timeout_demo.go")
	} else {
		fmt.Println("‚ùå –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –≤—ã—à–µ.")
	}
	fmt.Println(strings.Repeat("=", 50))
}
