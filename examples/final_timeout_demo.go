// +build ignore

package main

import (
	"fmt"
	"log"
	"strings"
	"time"

	tea "github.com/charmbracelet/bubbletea"
	"github.com/qzeleza/termos/internal/query"
	"github.com/qzeleza/termos/internal/task"
)

func main() {
	fmt.Println("–ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ç–∞–π–º–∞—É—Ç–æ–≤...")
	fmt.Println("–ü–æ–¥—Å–∫–∞–∑–∫–∞:")
	fmt.Println("- –¢–∞–π–º–µ—Ä –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å–ø—Ä–∞–≤–∞ –æ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ [MM:SS]")  
	fmt.Println("- –í –∑–∞–¥–∞—á–∞—Ö –≤—ã–±–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ –ü–†–û–ë–ï–õ —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä")
	fmt.Println("- –í –∑–∞–¥–∞—á–∞—Ö –≤–≤–æ–¥–∞ –ª—é–±–æ–π —Å–∏–º–≤–æ–ª –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç —Ç–∞–π–º–µ—Ä")
	fmt.Println("- –ù–∞–≤–∏–≥–∞—Ü–∏—è: —Å—Ç—Ä–µ–ª–∫–∏ ‚Üë/‚Üì, Enter - –≤—ã–±–æ—Ä, Ctrl+C - –æ—Ç–º–µ–Ω–∞")
	fmt.Println("")

	// –°–æ–∑–¥–∞–µ–º –æ—á–µ—Ä–µ–¥—å
	queue := query.New("üïê –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ç–∞–π–º–∞—É—Ç–æ–≤")

	// 1. –ë—ã—Å—Ç—Ä–∞—è –∑–∞–¥–∞—á–∞ –≤—ã–±–æ—Ä–∞ (5 —Å–µ–∫)
	quickSelect := task.NewSingleSelectTask(
		"–ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä (5 —Å–µ–∫)",
		[]string{"üöÄ –ë—ã—Å—Ç—Ä–æ", "üêå –ú–µ–¥–ª–µ–Ω–Ω–æ", "‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ"},
	)
	quickSelect.WithTimeout(5*time.Second, "‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ")

	// 2. –ó–∞–¥–∞—á–∞ –≤–≤–æ–¥–∞ (8 —Å–µ–∫)
	textInput := task.NewInputTaskNew("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è (8 —Å–µ–∫)", "–∏–º—è")
	textInput.WithTimeout(8*time.Second, "–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")

	// 3. YesNo –∑–∞–¥–∞—á–∞ (6 —Å–µ–∫)
	yesNo := task.NewYesNoTask("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–µ–º–æ? (6 —Å–µ–∫)", "–°–æ–≥–ª–∞—Å–Ω—ã –ª–∏ –≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?")
	yesNo.WithTimeout(6*time.Second, 0) // 0 = "–î–∞"

	// 4. –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä (10 —Å–µ–∫)
	multiSelect := task.NewMultiSelectTask(
		"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ (10 —Å–µ–∫)",
		[]string{"üîµ Go", "üêç Python", "‚ö° JavaScript", "ü¶Ä Rust", "‚òï Java"},
	)
	multiSelect.WithTimeout(10*time.Second, []string{"üîµ Go", "üêç Python"})

	// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å
	queue.AddTasks([]task.Task{
		quickSelect,
		textInput,
		yesNo,
		multiSelect,
	})

	// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É
	p := tea.NewProgram(queue)
	finalModel, err := p.Run()
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:", err)
	}

	// –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	if _, ok := finalModel.(*query.Model); ok {
		fmt.Println("\n" + strings.Repeat("=", 60))
		fmt.Println("üéâ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò –¢–ê–ô–ú–ê–£–¢–û–í")
		fmt.Println(strings.Repeat("=", 60))

		fmt.Printf("1Ô∏è‚É£ –ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä: %s\n", quickSelect.GetSelected())
		fmt.Printf("2Ô∏è‚É£ –í–∞—à–µ –∏–º—è: %s\n", textInput.GetValue())
		
		if yesNo.IsYes() {
			fmt.Printf("3Ô∏è‚É£ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ: ‚úÖ –î–∞\n")
		} else if yesNo.IsNo() {
			fmt.Printf("3Ô∏è‚É£ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ: ‚ùå –ù–µ—Ç\n")  
		} else {
			fmt.Printf("3Ô∏è‚É£ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ: üö™ –í—ã—Ö–æ–¥\n")
		}

		selected := multiSelect.GetSelected()
		if len(selected) > 0 {
			fmt.Printf("4Ô∏è‚É£ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: %v\n", selected)
		} else {
			fmt.Printf("4Ô∏è‚É£ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: (–Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ)\n")
		}

		fmt.Println(strings.Repeat("=", 60))
		fmt.Println("‚ú® –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
	}
}
